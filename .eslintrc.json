{
  "root": true,
  // ㄴ현재사용하는 eslint 파일이 가장 최상단인지 설정
  "parser": "@typescript-eslint/parser",
  // ㄴ@typescript-eslint 필수 세팅
  "extends": ["next/core-web-vitals", "next/typescript"],

  "rules": {
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-var-requires": 0,
    "@typescript-eslint/no-require-imports": "warn",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        // ㄴ변수 선언문에 대한 경고 처리 방식을 지정합니다.
        //   "all"로 지정하면 모든 변수 선언문에 대해 경고를 발생시키며,
        //   "local"로 지정하면 지역 변수에 대해서만 경고를 발생시킵니다. 기본값은 "all"입니다.
        "args": "after-used",
        // ㄴ 함수의 인수에 대한 경고 처리 방식을 지정합니다.
        //   "all"로 지정하면 모든 인수에 대해 경고를 발생시키며,
        //   "after-used"로 지정하면 사용된 이후에만 경고를 발생시킵니다. 기본값은 "all"입니다.

        "argsIgnorePattern": "^__", // 사용하지 않는 인수는 __를 붙인다.
        // ㄴ정규식으로 지정된 패턴에 일치하는 함수 인수는 경고하지 않습니다.
        //   기본값은 "^_"으로 시작하는 함수 인수입니다.
        "varsIgnorePattern": "^__" // 사용하지 않는 변수는 __를 붙인다.
        // ㄴ 정규식으로 지정된 패턴에 일치하는 변수 선언문은 경고하지 않습니다.
        //   기본값은 "^_"으로 시작하는 변수 선언문입니다.
      }
    ],
    "no-unused-vars": "off",
    // ㄴunused-imports 기본 세팅 1 >> 사용되지 않은 변수에 대한 경고를 비활성화합니다. - lint와 충돌하기 때문에 기본 설정은 끄고 타입 스크립트 린트에서 설정
    "no-var": "warn",
    "no-console": "warn",
    // "unused-imports/no-unused-imports": "warn",
    // ㄴunused-imports 기본 세팅 2 >> 사용되지 않은 import에 대한 경고를 활성화합니다.
    "import/no-unresolved": "error"
    // ㄴeslint-import-resolver-typescript 필수옵션 1
    // >> import 경로가 잘못된 경우 경고를 활성화합니다.

    // "react/react-in-jsx-scope": "off",
    // ㄴ JSX를 사용할 때 React를 import할 필요가 없도록 합니다.
    //  "no-unsafe-optional-chaining": 1,
    // ㄴ undefined로 확인되는 값에서 optional chanining에 대한 경고를 활성화한다(에러x)
    // "react/no-unknown-property": [
    //   2,
    //   {
    //     "ignore": ["jsx", "global"]
    //     // ㄴnext.js에서 global style 사용시 쓰는 문법에서 "<style jsx global></style>"
    //     //  알수없는 property라는 에러가 나는데, 해당에러를 무시하기 위한 setting
    //   }
    // ]
  }
}
